[19:04:54][mpenners@M-C02W10FNHTDG][devopsTrain-exe1-awstf]# terraform plan

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_instance.project1_inst will be created
  + resource "aws_instance" "project1_inst" {
      + ami                                  = "ami-0f8ce9c417115413d"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = true
      + availability_zone                    = "eu-south-1a"
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t3.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = (known after apply)
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + subnet_id                            = (known after apply)
      + tags_all                             = (known after apply)
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification {
          + capacity_reservation_preference = (known after apply)

          + capacity_reservation_target {
              + capacity_reservation_id = (known after apply)
            }
        }

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + enclave_options {
          + enabled = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = (known after apply)
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = (known after apply)
          + instance_metadata_tags      = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }
    }

  # aws_internet_gateway.proj1_igw will be created
  + resource "aws_internet_gateway" "proj1_igw" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags_all = (known after apply)
      + vpc_id   = (known after apply)
    }

  # aws_key_pair.proj1_key will be created
  + resource "aws_key_pair" "proj1_key" {
      + arn             = (known after apply)
      + fingerprint     = (known after apply)
      + id              = (known after apply)
      + key_name        = "id_proj1"
      + key_name_prefix = (known after apply)
      + key_pair_id     = (known after apply)
      + public_key      = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC6Fvt5RoVlb+/w+fS38iDG6kvZoT84nbMCNwnL+3jbTrU5F0PY0fYG+DVwMdJuiuLONe9VjqvEwkiinGqyRJGmcc60g3krhPcVSXTP6dtNsAPplmVC9SrrZAyVtdyj3B+CvrWDjFxCsFjzWV2Py0C2j2rioaRZh6JhDCimJBiKEuXZxjh6R8toXut6njOAVoJPfmpBN6TJIY/YZRpw21HCjy7m86kNMb2+laeEBzmqu5Nbw01z5OyNDi9fA0DFlSfahWZ2F1Tx7fWIPILj8pUZnYWofV2lHDAtjEonKDcRdTBOwXg5suJq4JqZIUCWAy52skh0VK2WNpkdM7KUEtlv mpenners@M-C02W10FNHTDG"
      + tags_all        = {
          + "Name"     = "proj1"
          + "Pipeline" = "devopsTrain-exe1-cipipe"
          + "Source"   = "devopsTrain-exe1-awstf"
        }
    }

  # aws_route_table.proj1_routes will be created
  + resource "aws_route_table" "proj1_routes" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + carrier_gateway_id         = ""
              + cidr_block                 = "0.0.0.0/0"
              + destination_prefix_list_id = ""
              + egress_only_gateway_id     = ""
              + gateway_id                 = (known after apply)
              + instance_id                = ""
              + ipv6_cidr_block            = ""
              + local_gateway_id           = ""
              + nat_gateway_id             = ""
              + network_interface_id       = ""
              + transit_gateway_id         = ""
              + vpc_endpoint_id            = ""
              + vpc_peering_connection_id  = ""
            },
        ]
      + tags_all         = (known after apply)
      + vpc_id           = (known after apply)
    }

  # aws_route_table_association.proj1_public will be created
  + resource "aws_route_table_association" "proj1_public" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_security_group.proj1_sg will be created
  + resource "aws_security_group" "proj1_sg" {
      + arn                    = (known after apply)
      + description            = "To get access to EC2 instance"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
            },
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 8080
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 8080
            },
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 80
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 80
            },
        ]
      + name                   = "Project-1-EC2-SG"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags_all               = (known after apply)
      + vpc_id                 = (known after apply)
    }

  # aws_subnet.proj1_subnet will be created
  + resource "aws_subnet" "proj1_subnet" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "eu-south-1a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.2.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "aws:subnet-10.0.2.0/24"
        }
      + tags_all                                       = {
          + "Name" = "aws:subnet-10.0.2.0/24"
        }
      + vpc_id                                         = (known after apply)
    }

  # aws_vpc.proj1_vpc will be created
  + resource "aws_vpc" "proj1_vpc" {
      + arn                                  = (known after apply)
      + cidr_block                           = "10.0.2.0/23"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_classiclink                   = false
      + enable_classiclink_dns_support       = (known after apply)
      + enable_dns_hostnames                 = true
      + enable_dns_support                   = true
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags                                 = {
          + "Name" = "aws:vpc-10.0.2.0/23"
        }
      + tags_all                             = {
          + "Name"     = "aws:vpc-10.0.2.0/23"
          + "Pipeline" = "devopsTrain-exe1-cipipe"
          + "Source"   = "devopsTrain-exe1-awstf"
        }
    }

  # local_file.ansible_inventory will be created
  + resource "local_file" "ansible_inventory" {
      + content              = (known after apply)
      + directory_permission = "0777"
      + file_permission      = "0644"
      + filename             = "./ansible/hosts"
      + id                   = (known after apply)
    }

  # shell_script.call_ansible will be created
  + resource "shell_script" "call_ansible" {
      + dirty             = false
      + environment       = {
          + "ANSIBLE_HOST_KEY_CHECKING" = "False"
          + "ANSIBLE_INVENTORY"         = "hosts"
          + "ANSIBLE_LOG_PATH"          = "current_ansible.log"
          + "ANSIBLE_PRIVATE_KEY_FILE"  = "/Users/mpenners/.aws/id_proj1"
          + "ANSIBLE_REMOTE_USER"       = "ubuntu"
        }
      + id                = (known after apply)
      + output            = (known after apply)
      + working_directory = "."

      + lifecycle_commands {
          + create = <<-EOT
                cd "./ansible/"
                rc="$(ansible-playbook ./proj1-tasks.yml >/dev/null 2>&1)$?"
                echo "{\"ansible_playbook_exit_status\": \"$rc\"}" > ./ansible_tf_stat.json
            EOT
          + delete = <<-EOT
                rm -f "ansible/current_ansible.log"
                rm -f "ansible/ansible_tf_stat.json"
            EOT
        }
    }

Plan: 10 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + ANSIBLE_INVENTORY        = "hosts"
  + ANSIBLE_LOG_PATH         = "current_ansible.log"
  + ANSIBLE_PRIVATE_KEY_FILE = "/Users/mpenners/.aws/id_proj1"
  + ANSIBLE_REMOTE_USER      = "ubuntu"
  + EC2_selected             = "ec2.eu-south-1.amazonaws.com"
  + account_id               = "350377495939"
  + ansible_tf_statfile      = "ansible_tf_stat.json"
  + caller_arn               = "arn:aws:iam::350377495939:root"
  + caller_user              = "350377495939"
  + instance-private-ip      = (known after apply)
  + instance-public-ip       = (known after apply)
  + region_selected          = "eu-south-1"

─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run "terraform apply" now.
[19:05:05][mpenners@M-C02W10FNHTDG][devopsTrain-exe1-awstf]# 
